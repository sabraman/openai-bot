import { Context } from "../packages/index.ts";
import { processFormattedText, escapeHtml } from "../utils/formatting.ts";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
const splitLongText = (text: string, maxLength: number = 4000): string[] => {
  const parts: string[] = [];
  let currentPart = "";

  // –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å —Å–ª–æ–≤–∞
  const words = text.split(" ");

  for (const word of words) {
    if ((currentPart + " " + word).length > maxLength && currentPart) {
      parts.push(currentPart.trim());
      currentPart = word;
    } else {
      currentPart = currentPart ? `${currentPart} ${word}` : word;
    }
  }

  if (currentPart) {
    parts.push(currentPart.trim());
  }

  return parts;
};

const testCases = [
  {
    name: "–ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–≥–∏",
    text: "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b> –∏ <i>–∫—É—Ä—Å–∏–≤</i>",
  },
  {
    name: "–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏",
    text: "<b>–ñ–∏—Ä–Ω—ã–π <i>–∏ –∫—É—Ä—Å–∏–≤</i></b>",
  },
  {
    name: "–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏",
    text: "<b>–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–π —Ç–µ–≥ <i>–∏ –µ—â–µ –æ–¥–∏–Ω",
  },
  {
    name: "–ë–ª–æ–∫ –∫–æ–¥–∞",
    text: "<pre><code>const test = 'code';</code></pre>",
  },
  {
    name: "HTML –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞",
    text: "<pre><code>function test() {\n  return <div class='test'>Hello</div>;\n}</code></pre>",
  },
  {
    name: "–°–º–µ—à–∞–Ω–Ω—ã–π HTML –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞",
    text: "<pre><code>// HTML —Ç–µ–≥–∏ –≤ –∫–æ–¥–µ\nconst template = `\n  <div class='container'>\n    <h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>\n    <p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ</p>\n  </div>\n`;</code></pre>",
  },
  {
    name: "–ë–ª–æ–∫ –∫–æ–¥–∞ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏",
    text: "<pre><code class='language-html'><div>\n  <span>—Ç–µ–∫—Å—Ç</span>\n</div></code></pre>",
  },
  {
    name: "–¶–∏—Ç–∞—Ç–∞",
    text: "<blockquote>–¢–µ–∫—Å—Ç —Ü–∏—Ç–∞—Ç—ã\n–í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ —Ü–∏—Ç–∞—Ç—ã</blockquote>",
  },
  {
    name: "–°–º–µ—à–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    text: "<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>\n\n<blockquote>–¶–∏—Ç–∞—Ç–∞ —Å <i>–∫—É—Ä—Å–∏–≤–æ–º</i></blockquote>\n\n<pre><code>const code = 'test';</code></pre>",
  },
  {
    name: "–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
    text: Array(100)
      .fill("<b>–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</b> —Å <i>—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º</i>")
      .join(" "),
  },
  {
    name: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏",
    text: "<div>–ë–ª–æ–∫</div> —Å <br> –ø–µ—Ä–µ–Ω–æ—Å–æ–º –∏ <span>—Å–ø–∞–Ω–æ–º</span>",
  },
  {
    name: "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã",
    text: "–¢–µ–∫—Å—Ç\n\n\n\n—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏\n\n\n\n–ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏",
  },
  {
    name: "–°–ª–æ–∂–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    text: `<b>–ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞:</b>

<pre><code>// HTML –≤ JavaScript
const element = document.createElement('div');
element.innerHTML = '<span class="highlight">–¢–µ–∫—Å—Ç</span>';
element.setAttribute('data-test', 'value');

// –ü—Ä–∏–º–µ—Ä JSX
const Component = () => (
  <>
<div>
<div className="container">
<h1>–ó–∞–≥–æ–ª–æ–≤–æ–∫</h1>
<p>–ü–∞—Ä–∞–≥—Ä–∞—Ñ —Å <b>–∂–∏—Ä–Ω—ã–º</b> —Ç–µ–∫—Å—Ç–æ–º</p>
</div>
</div>
  </>
);</code></pre>

<blockquote>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–≥–æ–≤ –≤ –∫–æ–¥–µ</blockquote>

<i>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</i>`,
  },
];

const testController = async (ctx: Context) => {
  await ctx.reply("<b>üîç –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>");

  for (const testCase of testCases) {
    try {
      await ctx.reply(`\n<b>üìù –¢–µ—Å—Ç:</b> ${testCase.name}`);

      // –†–∞–∑–±–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
      const escapedSource = escapeHtml(testCase.text);
      const sourceParts = splitLongText(escapedSource);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
      for (let i = 0; i < sourceParts.length; i++) {
        const part = sourceParts[i];
        const prefix =
          sourceParts.length > 1
            ? `<b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç (—á–∞—Å—Ç—å ${i + 1}/${sourceParts.length}):</b>\n`
            : "<b>–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:</b>\n";
        await ctx.reply(`${prefix}<code>${part}</code>`);
      }

      await ctx.reply("<b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>");
      await processFormattedText(ctx, testCase.text);
    } catch (error: any) {
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å —Å –ø–æ–ª–Ω—ã–º —Å—Ç–µ–∫–æ–º
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${testCase.name}":`);
      console.error("–¢–µ–∫—Å—Ç:", testCase.text);
      console.error("–û—à–∏–±–∫–∞:", error);
      console.error("–°—Ç–µ–∫:", error.stack);

      // –í —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
      const errorMessage = escapeHtml(error.message);
      await ctx.reply(
        `<b>‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ ${testCase.name}:</b>\n<code>${errorMessage}</code>`
      );
    }
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise((resolve) => setTimeout(resolve, 1000));
  }

  await ctx.reply("<b>‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>");
};

export { testController };
