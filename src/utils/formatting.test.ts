import { assertEquals } from "https://deno.land/std@0.217.0/assert/mod.ts";
import { formatMessage } from "./formatting.ts";

Deno.test("–¢–µ—Å—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤", () => {
  const testCases = [
    {
      input: "–¢–µ–∫—Å—Ç —Å —Ç–æ—á–∫–æ–π.",
      expected: "–¢–µ–∫—Å—Ç —Å —Ç–æ—á–∫–æ–π\\.",
      description: "–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç —Å —Ç–æ—á–∫–æ–π",
    },
    {
      input: "–¢–µ–∫—Å—Ç —Å–æ [—Å–∫–æ–±–∫–∞–º–∏]",
      expected: "–¢–µ–∫—Å—Ç —Å–æ \\[—Å–∫–æ–±–∫–∞–º–∏\\]",
      description: "–¢–µ–∫—Å—Ç —Å–æ —Å–∫–æ–±–∫–∞–º–∏",
    },
    {
      input: "–¢–µ–∫—Å—Ç —Å *–∑–≤–µ–∑–¥–æ—á–∫–æ–π*",
      expected: "–¢–µ–∫—Å—Ç —Å *–∑–≤–µ–∑–¥–æ—á–∫–æ–π*",
      description: "–¢–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º",
    },
    {
      input: "–¢–µ–∫—Å—Ç —Å —Ç–æ—á–∫–∞–º–∏...",
      expected: "–¢–µ–∫—Å—Ç —Å —Ç–æ—á–∫–∞–º–∏\\.\\.\\.",
      description: "–¢–µ–∫—Å—Ç —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º",
    },
    {
      input: "–¢–µ–∫—Å—Ç —Å –¥–µ—Ñ–∏—Å–æ–º - –∏ —Ç–æ—á–∫–æ–π.",
      expected: "–¢–µ–∫—Å—Ç —Å –¥–µ—Ñ–∏—Å–æ–º \\- –∏ —Ç–æ—á–∫–æ–π\\.",
      description: "–¢–µ–∫—Å—Ç —Å –¥–µ—Ñ–∏—Å–æ–º –∏ —Ç–æ—á–∫–æ–π",
    },
  ];

  for (const { input, expected, description } of testCases) {
    const result = formatMessage(input);
    assertEquals(
      result,
      expected,
      `${description} –Ω–µ –ø—Ä–æ—à–µ–ª: ${result} !== ${expected}`
    );
  }
});

Deno.test("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è HTML –≤ Markdown", () => {
  const testCases = [
    {
      input: "<b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>",
      expected: "*–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*",
      description: "–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç",
    },
    {
      input: "<i>–ö—É—Ä—Å–∏–≤</i>",
      expected: "_–ö—É—Ä—Å–∏–≤_",
      description: "–ö—É—Ä—Å–∏–≤",
    },
    {
      input: "<code>console.log()</code>",
      expected: "`console.log()`",
      description: "–ò–Ω–ª–∞–π–Ω –∫–æ–¥",
    },
    {
      input: "<b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b> - –æ–ø–∏—Å–∞–Ω–∏–µ",
      expected: "*–ó–∞–≥–æ–ª–æ–≤–æ–∫* \\- –æ–ø–∏—Å–∞–Ω–∏–µ",
      description: "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –¥–µ—Ñ–∏—Å–æ–º",
    },
  ];

  for (const { input, expected, description } of testCases) {
    const result = formatMessage(input);
    assertEquals(
      result,
      expected,
      `${description} –Ω–µ –ø—Ä–æ—à–µ–ª: ${result} !== ${expected}`
    );
  }
});

Deno.test("–¢–µ—Å—Ç –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞", () => {
  const input =
    "<pre><code>function test() {\n  console.log('test');\n}</code></pre>";
  const expected = "```\nfunction test() {\n  console.log('test');\n}\n```";
  const result = formatMessage(input);
  assertEquals(result, expected, "–ë–ª–æ–∫ –∫–æ–¥–∞ –Ω–µ –ø—Ä–æ—à–µ–ª");
});

Deno.test("–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", () => {
  const testCases = [
    {
      input: "üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã</b>",
      expected: "üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã*",
      description: "–≠–º–æ–¥–∑–∏ —Å –∂–∏—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º",
    },
    {
      input: "<b>–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:</b> ‚Ä¢ <i>–ü—Ä–∏–º–µ—Ä</i>",
      expected: "*–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:* ‚Ä¢ _–ü—Ä–∏–º–µ—Ä_",
      description: "–°–º–µ—à–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    },
    {
      input: "‚Ä¢ <code>test()</code> - <i>–æ–ø–∏—Å–∞–Ω–∏–µ</i>",
      expected: "‚Ä¢ `test()` \\- _–æ–ø–∏—Å–∞–Ω–∏–µ_",
      description: "–°–ø–∏—Å–æ–∫ —Å –∫–æ–¥–æ–º –∏ –∫—É—Ä—Å–∏–≤–æ–º",
    },
    {
      input: "React –∏ JavaScript",
      expected: "`React` –∏ `JavaScript`",
      description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤",
    },
  ];

  for (const { input, expected, description } of testCases) {
    const result = formatMessage(input);
    assertEquals(
      result,
      expected,
      `${description} –Ω–µ –ø—Ä–æ—à–µ–ª: ${result} !== ${expected}`
    );
  }
});

Deno.test("–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –∏–∑ —á–∞—Ç–∞", () => {
  const input = `üìå <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã</b>
<i>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å—É –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è. –í–∞–∂–Ω–æ —É–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é.</i>

<b>üëç –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã</b>
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: <i>–í –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.</i>

<b>üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞</b>
<b>–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:</b>
‚Ä¢ <b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è</b> - <i>–ú–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—á–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.</i>`;

  const expected = `üìå *–û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã*
_–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–æ–ø—Ä–æ—Å—É –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\\. –í–∞–∂–Ω–æ —É–º–µ—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é\\._

*üëç –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã*
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: _–í –¥–∞–Ω–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏–∫–∞–∫–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\\._

*üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞*
*–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:*
‚Ä¢ *–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è* \\- _–ú–æ–∂–µ—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—á–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏\\._`;

  const result = formatMessage(input);
  assertEquals(result, expected, "–†–µ–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –Ω–µ –ø—Ä–æ—à–µ–ª");
});

Deno.test("–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ LLM", () => {
  const input = `–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å. –¢—ã –∑–∞—Ç—Ä–æ–Ω—É–ª –æ—á–µ–Ω—å –≤–∞–∂–Ω—É—é —Ç–µ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ React. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —Ç–≤–æ–π –æ—Ç–≤–µ—Ç —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ.

<b>üìå –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã</b>
–¢—ã –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –û–¥–Ω–∞–∫–æ, –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞, –∏–∑-–∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç "–º–∏–≥–∞–Ω–∏–µ". –ë—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ, –µ—Å–ª–∏ –±—ã —Ç—ã –æ–ø–∏—Å–∞–ª, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ö–Ω–∏–∫–∏ React –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã.

<b>üëç –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã</b>
‚Ä¢ –®–∏—Ä–æ–∫–∏–π –æ—Ö–≤–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –¢—ã –∑–Ω–∞–µ—à—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–≤–æ–µ–º –æ–ø—ã—Ç–µ.
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ - –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å.

<b>üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞</b>
<b>–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:</b>
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ - –ù–µ–ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –±–æ—Ä–æ—Ç—å—Å—è —Å "–º–∏–≥–∞–Ω–∏–µ–º" –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ - –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, –ø–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∫–∞–∫ –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É.`;

  const expected = `–ü—Ä–∏–≤–µ—Ç\\! –û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å\\. –¢—ã –∑–∞—Ç—Ä–æ–Ω—É–ª –æ—á–µ–Ω—å –≤–∞–∂–Ω—É—é —Ç–µ–º—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ \`React\`\\. –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º —Ç–≤–æ–π –æ—Ç–≤–µ—Ç —à–∞–≥ –∑–∞ —à–∞–≥–æ–º –∏ –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ\\.

*üìå –û—Å–Ω–æ–≤–Ω—ã–µ –≤—ã–≤–æ–¥—ã*
–¢—ã –ø–µ—Ä–µ—á–∏—Å–ª–∏–ª –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è –ø—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ \`React\`\\-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\\. –û–¥–Ω–∞–∫–æ, –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞, –∏–∑\\-–∑–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç "–º–∏–≥–∞–Ω–∏–µ"\\. –ë—ã–ª–æ –±—ã –∑–¥–æ—Ä–æ–≤–æ, –µ—Å–ª–∏ –±—ã —Ç—ã –æ–ø–∏—Å–∞–ª, –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Ö–Ω–∏–∫–∏ \`React\` –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º—ã\\.

*üëç –°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã*
‚Ä¢ –®–∏—Ä–æ–∫–∏–π –æ—Ö–≤–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ \\- –¢—ã –∑–Ω–∞–µ—à—å –º–Ω–æ–≥–æ –ø–æ–ª–µ–∑–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–≤–æ–µ–º –æ–ø—ã—Ç–µ\\.
‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏ —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ \\- –≠—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å\\.

*üöÄ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–æ—Å—Ç–∞*
*–ß—Ç–æ —É–ª—É—á—à–∏—Ç—å:*
‚Ä¢ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ \\- –ù–µ–ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ç—ã –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –±–æ—Ä–æ—Ç—å—Å—è —Å "–º–∏–≥–∞–Ω–∏–µ–º" –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞\\.
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ \\- –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—ä—è—Å–Ω–∏—Ç—å, –ø–æ—á–µ–º—É —Ç—ã –≤—ã–±—Ä–∞–ª –∏–º–µ–Ω–Ω–æ —ç—Ç–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –∫–∞–∫ –æ–Ω–∏ –ø–æ–º–æ–≥—É—Ç —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É\\.`;

  const result = formatMessage(input);
  assertEquals(
    result,
    expected,
    "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ LLM –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É"
  );
});

Deno.test("–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ LLM - –ö–æ–¥ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", () => {
  const input = `–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ \`React\`:

<b>1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>React.memo()</code> –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤:
\`\`\`javascript
const MyComponent = React.memo(({ data }) => {
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ props
  return <div>{data.map(item => (
    <span key={item.id}>{item.name}</span>
  ))}</div>;
});
\`\`\`

<b>2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>useMemo</code> –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
\`\`\`javascript
const memoizedValue = useMemo(() => {
  return expensiveCalculation(data);
}, [data]);
\`\`\`

<i>–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å</i>: –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π - –æ–Ω–∞ —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤.`;

  const expected = `–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ \`React\`:

*1\\. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`React.memo()\` –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö —Ä–µ–Ω–¥–µ—Ä–æ–≤:
\`\`\`javascript
const MyComponent = React.memo(({ data }) => {
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ props
  return <div>{data.map(item => (
    <span key={item.id}>{item.name}</span>
  ))}</div>;
});
\`\`\`

*2\\. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º*
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`useMemo\` –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:
\`\`\`javascript
const memoizedValue = useMemo(() => {
  return expensiveCalculation(data);
}, [data]);
\`\`\`

_–í–∞–∂–Ω–æ –ø–æ–º–Ω–∏—Ç—å_: –Ω–µ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª—è–π—Ç–µ –º–µ–º–æ–∏–∑–∞—Ü–∏–µ–π \\- –æ–Ω–∞ —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤\\.`;

  const result = formatMessage(input);
  assertEquals(
    result,
    expected,
    "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É"
  );
});

Deno.test("–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ LLM - –°–ø–∏—Å–∫–∏ –∏ –º–∞—Ä–∫–µ—Ä—ã", () => {
  const input = `<b>üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>

1. <i>–ò–∑–ª–∏—à–Ω–∏–µ —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ã</i>
   ‚Ä¢ –ö–æ–≥–¥–∞: –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   ‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å <code>React.memo()</code>

2. <i>–¢—è–∂–µ–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è</i>
   ‚Ä¢ –ö–æ–≥–¥–∞: –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
   ‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –ø—Ä–∏–º–µ–Ω—è—Ç—å <code>useMemo()</code>

<b>üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:</b>
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ <code>React DevTools</code>
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ <code>Performance</code> –≤–∫–ª–∞–¥–∫—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ <code>React.lazy()</code> –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∞`;

  const expected = `*üìå –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:*

1\\. _–ò–∑–ª–∏—à–Ω–∏–µ —Ä–µ—Ä–µ–Ω–¥–µ—Ä—ã_
   ‚Ä¢ –ö–æ–≥–¥–∞: –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
   ‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å \`React.memo()\`

2\\. _–¢—è–∂–µ–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è_
   ‚Ä¢ –ö–æ–≥–¥–∞: –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤
   ‚Ä¢ –†–µ—à–µ–Ω–∏–µ: –ø—Ä–∏–º–µ–Ω—è—Ç—å \`useMemo()\`

*üöÄ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:*
‚Ä¢ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ \`React DevTools\`
‚Ä¢ –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ \`Performance\` –≤–∫–ª–∞–¥–∫—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ \`React.lazy()\` –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–∞`;

  const result = formatMessage(input);
  assertEquals(
    result,
    expected,
    "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ –∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É"
  );
});

Deno.test(
  "–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ LLM - –°–º–µ—à–∞–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã",
  () => {
    const input = `<b>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (v18.0+)</b>

<i>–®–∞–≥ 1:</i> –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>React.Profiler</code> –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:
\`\`\`jsx
<Profiler id="MyComponent" onRender={(phase, actualTime) => {
  console.log(\`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç MyComponent –∑–∞—Ç—Ä–∞—Ç–∏–ª: \${actualTime}ms\`);
}}>
  <MyComponent />
</Profiler>
\`\`\`

<i>–®–∞–≥ 2:</i> –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Chrome DevTools:
‚Ä¢ FCP (First Contentful Paint) < 2s
‚Ä¢ LCP (Largest Contentful Paint) < 2.5s
‚Ä¢ FID (First Input Delay) < 100ms

<b>‚ùóÔ∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:</b>
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>index</code> –∫–∞–∫ key –≤ —Å–ø–∏—Å–∫–∞—Ö
‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ <code>{...props}</code> —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–æ–º –±–∞–Ω–¥–ª–∞ (max: ~100kb)`;

    const expected = `*–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ \`React\`\\-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è \\(v18\\.0\\+\\)*

_–®–∞–≥ 1:_ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`React.Profiler\` –¥–ª—è –∑–∞–º–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:
\`\`\`jsx
<Profiler id="MyComponent" onRender={(phase, actualTime) => {
  console.log(\`–ö–æ–º–ø–æ–Ω–µ–Ω—Ç MyComponent –∑–∞—Ç—Ä–∞—Ç–∏–ª: \${actualTime}ms\`);
}}>
  <MyComponent />
</Profiler>
\`\`\`

_–®–∞–≥ 2:_ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ Chrome DevTools:
‚Ä¢ FCP \\(First Contentful Paint\\) \\< 2s
‚Ä¢ LCP \\(Largest Contentful Paint\\) \\< 2\\.5s
‚Ä¢ FID \\(First Input Delay\\) \\< 100ms

*‚ùóÔ∏è –í–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è:*
‚Ä¢ –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \`index\` –∫–∞–∫ key –≤ —Å–ø–∏—Å–∫–∞—Ö
‚Ä¢ –ü—Ä–∏–º–µ–Ω—è–π—Ç–µ \`{...props}\` —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞–∑–º–µ—Ä–æ–º –±–∞–Ω–¥–ª–∞ \\(max: \\~100kb\\)`;

    const result = formatMessage(input);
    assertEquals(
      result,
      expected,
      "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É"
    );
  }
);
